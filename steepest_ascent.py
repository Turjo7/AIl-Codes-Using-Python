# -*- coding: utf-8 -*-
"""Steepest_Ascent_011152200.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eA7BQj9Xn59vMpPtmvr2WvwU9pY7i805
"""

#Problem: Sorting a list in ascending order
#Steepest_Ascent_011152200
import random
import math

def init():
  my_list = [2, 1, 5, 0, 8, 4, 10, 0, 20, 10];
  return my_list


def calc_cost(state):
  i = 0
  No_of_disorders = 0
  count = 0    #making boundary
  while(i < len(state)):
    for x in state:
      if count >= i:
        if state[i] > x:
          No_of_disorders += 1
      count += 1
    i += 1
    count = 0
  return No_of_disorders


def state_generation(current_state, current_state_cost):
  check_list = []
  check_cost = calc_cost(init())
  # print(f'1st print {current_state}, {current_state_cost}')
  for i in range(len(current_state)):
    for j in range(i+1, len(current_state)):
      new_state = current_state.copy()
      new_state[i], new_state[j] = new_state[j], new_state[i]  #swap
      # print(f'new_cost {calc_cost(new_state)}, 1st cost {check_cost}, current state cost {current_state_cost}')
      if(calc_cost(new_state) < check_cost):
        #print("yes")
        check_cost = calc_cost(new_state)
        check_list = new_state
  if calc_cost(check_list) < current_state_cost:
    #print("yes again")
    return check_list, check_cost
  else:
    return current_state, None


def goal_test(state):
	if calc_cost(state) == 0:
		return True
	else:
		return False


cost = calc_cost(init())
state = init()
while(not goal_test(state)):
  state, cost = state_generation(state, cost)
  if cost is None:
    print(state)
    break
print(state)